generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String?
  password      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  feedback      Feedback[]
  notifications Notification[]
  subscriptions Subscription[]

  @@map("users")
}

model Subscription {
  id              String        @id @default(cuid())
  userId          String
  serviceName     String
  planType        String
  cost            Float
  billingCycle    String
  nextBillingDate DateTime
  status          String        @default("active")
  category        String
  paymentMethod   String
  autoRenewal     Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions    Transaction[]

  @@index([userId])
  @@index([status])
  @@index([nextBillingDate])
  @@index([category])
  @@map("subscriptions")
}

model Transaction {
  id             String       @id @default(cuid())
  subscriptionId String
  amount         Float
  date           DateTime     @default(now())
  paymentMethod  String
  status         String       @default("pending")
  receiptUrl     String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
  @@index([status])
  @@index([date])
  @@map("transactions")
}

model Notification {
  id         String   @id @default(cuid())
  userId     String
  type       String
  title      String
  message    String
  priority   String   @default("medium")
  readStatus Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([priority])
  @@index([readStatus])
  @@index([createdAt])
  @@map("notifications")
}

model Feedback {
  id        String   @id @default(cuid())
  userId    String?
  email     String
  type      String
  message   String
  status    String   @default("new")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@map("feedback")
}
